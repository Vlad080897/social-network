{"version":3,"sources":["components/main_container/dialogs/dialogs.module.css","components/main_container/dialogs/dialogs.tsx"],"names":["module","exports","Dialogs","React","memo","divRef","useRef","scrollBtnRef","chatRef","useState","massages","setMassages","allMassages","map","m","Massage","name","userName","photo","massage","message","userId","socketUrl","setSocketUrl","useWebSocket","onOpen","onClose","getWebSocket","close","shouldReconnect","retryOnError","reconnectAttempts","reconnectInterval","sendMessage","lastMessage","sendJsonMessage","lastJsonMessage","readyState","current","addEventListener","style","visibility","scrollIntoView","behavior","setTimeout","useEffect","prevMassages","ReadyState","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","span","height","overflowY","ref","className","s","scrollBtn","enableReinitialize","initialValues","massageText","onSubmit","values","type","placeholder","massageInput","disabled","src","alt","massagePhoto","userWithoutPhoto"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,aAAe,8BAA8B,aAAe,8BAA8B,UAAY,6B,sOCS3GC,EAAoBC,IAAMC,MAAK,YAAU,IAAD,mBAEjD,IAAMC,EAASC,iBAA2B,MACpCC,EAAeD,iBAA2B,MAC1CE,EAAUF,iBAA2B,MAE3C,EAAgCG,mBADa,IAC7C,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAcF,EAASG,KAAI,SAACC,GAAD,OAAO,cAACC,EAAD,CAAwBC,KAAMF,EAAEG,SAAUC,MAAOJ,EAAEI,MAAOC,QAASL,EAAEM,SAAvDN,EAAEO,WAExD,EAAkCZ,mBAAwB,gEAA1D,mBAAOa,EAAP,KAAkBC,EAAlB,KAEA,EAOIC,IAAaF,EAAW,CACxBG,OAAQ,WACJF,EAAa,iEAGjBG,QAAS,WAAO,IAAD,EACC,QAAZ,EAAAC,WAAA,SAAgBC,SAEpBC,gBAAiB,kBAAM,GACvBC,cAAc,EACdC,kBAAmB,IACnBC,kBAAmB,MAjBnBC,EADJ,EACIA,YAEAC,GAHJ,EAEIC,gBAFJ,EAGID,aACAE,EAJJ,EAIIA,gBACAC,EALJ,EAKIA,WACAV,EANJ,EAMIA,aA2BJ,UAAAnB,EAAQ8B,eAAR,SAAiBC,iBAAiB,UAAU,WAAO,IAAD,EACjB,OAAzBhC,EAAa+B,UACb/B,EAAa+B,QAAQE,MAAMC,WAAa,WAG5C,UAAAlC,EAAa+B,eAAb,SAAsBC,iBAAiB,SAAS,WAAO,IAAD,EAClD,UAAAlC,EAAOiC,eAAP,SAAgBI,eAAe,CAAEC,SAAU,WAE3CC,YAAW,WACsB,OAAzBrC,EAAa+B,UACb/B,EAAa+B,QAAQE,MAAMC,WAAa,YAG7C,WAMXI,qBAAU,WACkB,OAApBT,GACAzB,GAAY,SAACmC,GAAD,4BAAsBA,GAAtB,YAAuCV,SAGxD,CAACF,EAAavB,IAEQ,mBACpBoC,aAAWC,WAAa,cADJ,cAEpBD,aAAWE,KAAO,QAFE,cAGpBF,aAAWG,QAAU,WAHD,cAIpBH,aAAWI,OAAS,UAJA,cAKpBJ,aAAWK,eAAiB,kBAOjC,OACI,mCACI,eAAC,IAAD,WACI,eAAC,IAAD,CAAKC,KAAM,GAAX,UACI,sBAAKb,MAAO,CAAEc,OAAQ,QAASC,UAAW,QAAUC,IAAKhD,EAAzD,UACKI,EACD,qBAAK4B,MAAO,CAAEC,WAAY,UAAYe,IAAKnD,OAE/C,qBAAKoD,UAAWC,IAAEC,UAAlB,SACI,cAAC,IAAD,CAAQH,IAAKjD,EAAb,kCAIR,cAAC,IAAD,CAAK8C,KAAM,GAAX,SACI,8BACI,cAAC,IAAD,CACIO,oBAAkB,EAClBC,cAAe,CAAEC,YAAa,IAC9BC,SAhET,SAACC,GACZ/B,EAAY+B,EAAOF,aACnBlB,YAAW,WAAO,IAAD,EACb,UAAAvC,EAAOiC,eAAP,SAAgBI,eAAe,CAAEC,SAAU,aAC5C,MAyDa,SAKK,kBACG,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOsB,KAAK,WAAWjD,KAAK,cAAckD,YAAY,qBAAqBT,UAAWC,IAAES,eACxF,wBAAQF,KAAK,SAASG,SAAU/B,IAAeU,aAAWE,KAA1D,8CAczB/C,YAEf,IAAMa,EAED,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAME,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAEjB,OACI,gCACMD,EAA2E,qBAAKmD,IAAKnD,EAAOoD,IAAI,GAAGb,UAAWC,IAAEa,eAAxG,qBAAKF,IAAKG,IAAkBF,IAAI,GAAGb,UAAWC,IAAEa,eAC1D,+BAAOvD,IACP,8BAAMG,IACN,cAAC,IAAD","file":"static/js/4.89125d05.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"massageInput\":\"dialogs_massageInput__3zlsy\",\"massagePhoto\":\"dialogs_massagePhoto__uRYaw\",\"scrollBtn\":\"dialogs_scrollBtn__3uQ5l\"};","import { Button, Col, Divider, Row } from 'antd';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\r\nimport userWithoutPhoto from '../../img/images.png';\r\nimport s from './dialogs.module.css';\r\n\r\n\r\n\r\n\r\nexport const Dialogs: React.FC = React.memo(({ }) => {\r\n\r\n    const divRef = useRef<HTMLHeadingElement>(null)\r\n    const scrollBtnRef = useRef<HTMLHeadingElement>(null)\r\n    const chatRef = useRef<HTMLHeadingElement>(null)\r\n    const massageArray: Array<chatMassageType> = []\r\n    const [massages, setMassages] = useState<Array<chatMassageType>>(massageArray)\r\n    const allMassages = massages.map((m) => <Massage key={m.userId} name={m.userName} photo={m.photo} massage={m.message} />)\r\n\r\n    const [socketUrl, setSocketUrl] = useState<string | null>('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\r\n\r\n    const {\r\n        sendMessage,\r\n        sendJsonMessage,\r\n        lastMessage,\r\n        lastJsonMessage,\r\n        readyState,\r\n        getWebSocket\r\n    } = useWebSocket(socketUrl, {\r\n        onOpen: () => {\r\n            setSocketUrl('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n\r\n        },\r\n        onClose: () => {\r\n            getWebSocket()?.close()\r\n        },\r\n        shouldReconnect: () => true,\r\n        retryOnError: true,\r\n        reconnectAttempts: 100,\r\n        reconnectInterval: 3000,\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n    const onSend = (values: { massageText: string }) => {\r\n        sendMessage(values.massageText)\r\n        setTimeout(() => {\r\n            divRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n        }, 100)\r\n\r\n    }\r\n\r\n    chatRef.current?.addEventListener('scroll', () => {\r\n        if (scrollBtnRef.current !== null) {\r\n            scrollBtnRef.current.style.visibility = 'visible'\r\n        }\r\n\r\n        scrollBtnRef.current?.addEventListener('click', () => {\r\n            divRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n\r\n            setTimeout(() => {\r\n                if (scrollBtnRef.current !== null) {\r\n                    scrollBtnRef.current.style.visibility = 'hidden'\r\n                }\r\n\r\n            }, 1000)\r\n        })\r\n    })\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (lastJsonMessage !== null) {\r\n            setMassages((prevMassages) => [...prevMassages, ...lastJsonMessage])\r\n        }\r\n\r\n    }, [lastMessage, setMassages])\r\n\r\n    const connectionStatus = {\r\n        [ReadyState.CONNECTING]: 'Connecting',\r\n        [ReadyState.OPEN]: 'Open',\r\n        [ReadyState.CLOSING]: 'Closing',\r\n        [ReadyState.CLOSED]: 'Closed',\r\n        [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\r\n    }[readyState];\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Row >\r\n                <Col span={24} >\r\n                    <div style={{ height: '400px', overflowY: 'auto' }} ref={chatRef}>\r\n                        {allMassages}\r\n                        <div style={{ visibility: 'hidden' }} ref={divRef} />\r\n                    </div>\r\n                    <div className={s.scrollBtn}>\r\n                        <Button ref={scrollBtnRef}  >To New Massages</Button>\r\n                    </div>\r\n\r\n                </Col>\r\n                <Col span={12} >\r\n                    <div>\r\n                        <Formik\r\n                            enableReinitialize\r\n                            initialValues={{ massageText: '' }}\r\n                            onSubmit={onSend}\r\n                        >\r\n                            {() => (\r\n                                <Form>\r\n                                    <Row>\r\n                                        <Field type=\"textarea\" name=\"massageText\" placeholder=\"Write your massage\" className={s.massageInput} />\r\n                                        <button type=\"submit\" disabled={readyState !== ReadyState.OPEN}>Send Massage</button>\r\n                                    </Row>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n\r\n})\r\n\r\n\r\nexport default Dialogs\r\n\r\nconst Massage: React.FC<{\r\n    name: string, photo: string, massage: string\r\n}> = ({ name, photo, massage }) => {\r\n\r\n    return (\r\n        <div>\r\n            {!photo ? <img src={userWithoutPhoto} alt=\"\" className={s.massagePhoto} /> : <img src={photo} alt=\"\" className={s.massagePhoto} />}\r\n            <span>{name}</span>\r\n            <div>{massage}</div>\r\n            <Divider />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\ntype chatMassageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}"],"sourceRoot":""}